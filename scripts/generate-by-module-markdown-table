#!/usr/bin/env node

const mappings = require("../mappings");
const reserved = require("../reserved");

function normalize(mapping) {
  return {
    mapping,
    group: mapping.module.split("/", 2).join("/")
  }
}

function sortByGroup(a, b) {
  return cmp(a.group, b.group);
}

function sortByModule(a, b) {
  return cmp(a.module, b.module);
}

function tableRow(mapping) {
  let before = mapping.global;
  let afterPackage = mapping.module;
  let afterExportName = mapping.export;
  let afterIdentifier = mapping.localName;

  // Object, Array, etc.
  if (reserved.includes(afterIdentifier)) {
    afterIdentifier = "Ember" + afterIdentifier;
  }

  let after;
  if (afterExportName === 'default') {
    after = `import ${afterIdentifier} from '${afterPackage}';`;
  } else {
    after = `import { ${afterExportName} } from '${afterPackage}';`;
  }

  before = code(before);
  after = code(after);

  return [before, after];
}

function buildTable(result, row) {
  let group = result[row.group] = result[row.group] || {
    maxBefore: 0,
    maxAfter: 0,
    rows: []
  };

  let [before, after] = tableRow(row.mapping);

  group.maxBefore = Math.max(group.maxBefore, before.length);
  group.maxAfter = Math.max(group.maxAfter, after.length);

  group.rows.push([before, after, row.mapping]);

  return result;
}

function cmp(a, b) {
  return (a > b) ? 1 : (a < b) ? -1 : 0;
}

function sortByPackageAndExport([,,mappingA], [,,mappingB]) {
  if (mappingA.module === mappingB.module) {
    return cmp(mappingA.export || "", mappingB.export || "");
  }

  return cmp(mappingA.module, mappingB.module);
}

function printTable(table) {
  Object.keys(table).map(name => {
    print("#### " + code(name));

    let group = table[name];
    let rows = group.rows;

    rows = rows.sort(sortByPackageAndExport);

    rows.unshift(["---", "---"]);
    rows.unshift(["Global", "Module"]);
    rows.map(([before, after]) => {
      print(`|${pad(after, group.maxAfter)}|${pad(before, group.maxBefore)}|`);
    });

    print();
  });
}

function code(str) {
  return "`" + str + "`";
}

function pad(str, max) {
  let extra = " ".repeat(max - str.length);
  return ` ${str}${extra} `;
}

function print() {
  console.log.apply(console, arguments);
}

let table = mappings
  .filter(mapping => !mapping.deprecated)
  .map(normalize)
  .sort(sortByGroup)
  .reduce(buildTable, {});

printTable(table);

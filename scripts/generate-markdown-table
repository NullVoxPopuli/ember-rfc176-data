#!/usr/bin/env node

let mappings = require("../mappings");
let reserved = require("../reserved");

let maxBefore = 0;
let maxAfter = 0;

let rows = mappings.filter(it => !it.deprecated).sort(byGlobal).map(mapping => {
  let before = mapping.global;
  let afterPackage = mapping.module;
  let afterExportName = mapping.export;
  let afterIdentifier = mapping.localName;

  // Object, Array, etc.
  if (reserved.includes(afterIdentifier)) {
    afterIdentifier = "Ember" + afterIdentifier;
  }

  let after;
  if (afterExportName === 'default') {
    after = `import ${afterIdentifier} from '${afterPackage}';`;
  } else {
    after = `import { ${afterExportName} } from '${afterPackage}';`;
  }

  before = code(before);
  after = code(after);

  maxBefore = Math.max(maxBefore, before.length);
  maxAfter = Math.max(maxAfter, after.length);

  return [before, after];
});

// Add headers to beginning of array
rows.unshift(["---", "---"]);
rows.unshift(["Before", "After"]);

rows = rows.map(([before, after]) => {
  console.log(`|${pad(before, maxBefore)}|${pad(after, maxAfter)}|`);
});

function code(str) {
  return "`" + str + "`";
}

function pad(str, max) {
  let extra = " ".repeat(max - str.length);
  return ` ${str}${extra} `;
}

function byGlobal(a, b) {
  return a.global.localeCompare(b.global);
}
